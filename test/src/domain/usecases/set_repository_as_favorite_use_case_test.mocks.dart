// Mocks generated by Mockito 5.3.2 from annotations
// in a3data_challenge/test/src/domain/usecases/set_repository_as_favorite_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:a3data_challenge/src/domain/entities/repository_entity.dart'
    as _i2;
import 'package:a3data_challenge/src/domain/repositories/repository_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRepositoryEntity_0 extends _i1.SmartFake
    implements _i2.RepositoryEntity {
  _FakeRepositoryEntity_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RepositoryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepositoryRepository extends _i1.Mock
    implements _i3.RepositoryRepository {
  @override
  _i4.Future<List<_i2.RepositoryEntity>> getListFavoritesFromDatabase() =>
      (super.noSuchMethod(
        Invocation.method(
          #getListFavoritesFromDatabase,
          [],
        ),
        returnValue: _i4.Future<List<_i2.RepositoryEntity>>.value(
            <_i2.RepositoryEntity>[]),
        returnValueForMissingStub: _i4.Future<List<_i2.RepositoryEntity>>.value(
            <_i2.RepositoryEntity>[]),
      ) as _i4.Future<List<_i2.RepositoryEntity>>);
  @override
  _i4.Future<void> saveRepositoryInDatabase(
          {required _i2.RepositoryEntity? newFavorite}) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveRepositoryInDatabase,
          [],
          {#newFavorite: newFavorite},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<_i2.RepositoryEntity> updateRepositoryInDatabase(
          {required _i2.RepositoryEntity? modifiedFavorite}) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateRepositoryInDatabase,
          [],
          {#modifiedFavorite: modifiedFavorite},
        ),
        returnValue:
            _i4.Future<_i2.RepositoryEntity>.value(_FakeRepositoryEntity_0(
          this,
          Invocation.method(
            #updateRepositoryInDatabase,
            [],
            {#modifiedFavorite: modifiedFavorite},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.RepositoryEntity>.value(_FakeRepositoryEntity_0(
          this,
          Invocation.method(
            #updateRepositoryInDatabase,
            [],
            {#modifiedFavorite: modifiedFavorite},
          ),
        )),
      ) as _i4.Future<_i2.RepositoryEntity>);
}
